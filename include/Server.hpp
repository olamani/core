#ifndef SERVER_HPP
#define SERVER_HPP

#include <string>

namespace Olamani {

namespace Server {

double      AUDIO_CUT_DIST;
bool        AUTO_MODE;
double      BACK_DASH_RATE;
int         BACK_PASSES;
double      BALL_ACCEL_MAX;
double      BALL_DECAY;
double      BALL_RAND;
double      BALL_SIZE;
double      BALL_SPEED_MAX;
double      BALL_STUCK_AREA;
double      BALL_WEIGHT;
int         CATCH_BAN_CYCLE;
double      CATCHABLE_AREA_L;
double      CATCHABLE_AREA_W;
double      CKICK_MARGIN;
int         CLANG_ADVICE_WIN;
int         CLANG_DEFINE_WIN;
int         CLANG_DEL_WIN;
int         CLANG_INFO_WIN;
int         CLANG_MESS_DELAY;
int         CLANG_MESS_PER_CYCLE;
int         CLANG_META_WIN;
int         CLANG_RULE_WIN;
int         CLANG_WIN_SIZE;
bool        COACH;
int         COACH_PORT;
bool        COACH_W_REFEREE;
int         CONNECT_WAIT;
double      CONTROL_RADIUS;
double      DASH_ANGLE_STEP;
double      DASH_POWER_RATE;
int         DROP_BALL_TIME;
double      EFFORT_DEC;
double      EFFORT_DEC_THR;
double      EFFORT_INC;
double      EFFORT_INC_THR;
double      EFFORT_INIT;
double      EFFORT_MIN;
bool        EXTRA_HALF_TIME;
int         EXTRA_STAMINA;
int         FORBID_KICK_OFF_OFFSIDE;
int         FOUL_CYCLES;
double      FOUL_DETECT_PROBABILITY;
int         FOUL_EXPONENT;
int         FREE_KICK_FAULTS;
int         FREEFORM_SEND_PERIOD;
int         FREEFORM_WAIT_PERIOD;
bool        FULLSTATE_L;
bool        FULLSTATE_R;
int         GAME_LOG_COMPRESSION;
std::string GAME_LOG_DIR;
int         GAME_LOG_FIXED;
std::string GAME_LOG_FIXED_NAME;
int         GAME_LOG_VERSION;
bool        GAME_LOGGING;
int         GAME_OVER_WAIT;
double      GOAL_WIDTH;
int         GOALIE_MAX_MOVES;
bool        GOLDEN_GOAL;
int         HALF_TIME;
int         HEAR_DECAY;
int         HEAR_INC;
int         HEAR_MAX;
double      INERTIA_MOMENT;
bool        KEEPAWAY;
int         KEEPAWAY_LENGTH;
bool        KEEPAWAY_LOG_DATED;
std::string KEEPAWAY_LOG_DIR;
int         KEEPAWAY_LOG_FIXED;
std::string KEEPAWAY_LOG_FIXED_NAME;
bool        KEEPAWAY_LOGGING;
int         KEEPAWAY_START;
int         KEEPAWAY_WIDTH;
int         KICK_OFF_WAIT;
double      KICK_POWER_RATE;
double      KICK_RAND;
double      KICK_RAND_FACTOR_L;
double      KICK_RAND_FACTOR_R;
double      KICKABLE_MARGIN;
std::string LANDMARK_FILE;
std::string LOG_DATE_FORMAT;
bool        LOG_TIMES;
double      MAX_BACK_TACKLE_POWER;
double      MAX_DASH_ANGLE;
double      MAX_DASH_POWER;
int         MAX_GOAL_KICKS;
double      MAX_TACKLE_POWER;
double      MAXMOMENT;
double      MAXNECKANG;
double      MAXNECKMOMENT;
double      MAXPOWER;
double      MIN_DASH_ANGLE;
double      MIN_DASH_POWER;
double      MINMOMENT;
double      MINNECKANG;
double      MINNECKMOMENT;
double      MINPOWER;
int         NR_EXTRA_HALFS;
int         NR_NORMAL_HALFS;
double      OFFSIDE_ACTIVE_AREA_SIZE;
double      OFFSIDE_KICK_MARGIN;
int         OLCOACH_PORT;
int         OLD_COACH_HEAR;
bool        PEN_ALLOW_MULT_KICKS;
int         PEN_BEFORE_SETUP_WAIT;
int         PEN_COACH_MOVES_PLAYERS;
double      PEN_DIST_X;
int         PEN_MAX_EXTRA_KICKS;
double      PEN_MAX_GOALIE_DIST_X;
int         PEN_NR_KICKS;
double      PEN_RANDOM_WINNER;
int         PEN_READY_WAIT;
int         PEN_SETUP_WAIT;
int         PEN_TAKEN_WAIT;
int         PENALTY_SHOOT_OUTS;
double      PLAYER_ACCEL_MAX;
double      PLAYER_DECAY;
double      PLAYER_RAND;
double      PLAYER_SIZE;
double      PLAYER_SPEED_MAX;
double      PLAYER_SPEED_MAX_MIN;
double      PLAYER_WEIGHT;
int         POINT_TO_BAN;
int         POINT_TO_DURATION;
int         PORT;
int         PRAND_FACTOR_L;
int         PRAND_FACTOR_R;
int         PROFILE;
int         PROPER_GOAL_KICKS;
double      QUANTIZE_STEP;
double      QUANTIZE_STEP_L;
int         RECORD_MESSAGES;
double      RECOVER_DEC;
double      RECOVER_DEC_THR;
double      RECOVER_INIT;
double      RECOVER_MIN;
int         RECV_STEP;
double      RED_CARD_PROBABILITY;
int         SAY_COACH_CNT_MAX;
int         SAY_COACH_MSG_SIZE;
int         SEND_COMMS;
int         SEND_STEP;
int         SEND_VI_STEP;
int         SENSE_BODY_STEP;
double      SIDE_DASH_RATE;
int         SIMULATOR_STEP;
double      SLOWNESS_ON_TOP_FOR_LEFT_TEAM;
double      SLOWNESS_ON_TOP_FOR_RIGHT_TEAM;
int         STAMINA_CAPACITY;
int         STAMINA_INC_MAX;
int         STAMINA_MAX;
int         START_GOAL_L;
int         START_GOAL_R;
double      STOPPED_BALL_VEL;
int         SYNCH_MICRO_SLEEP;
bool        SYNCH_MODE;
int         SYNCH_OFFSET;
int         SYNCH_SEE_OFFSET;
double      TACKLE_BACK_DIST;
int         TACKLE_CYCLES;
double      TACKLE_DIST;
int         TACKLE_EXPONENT;
double      TACKLE_POWER_RATE;
double      TACKLE_RAND_FACTOR;
double      TACKLE_WIDTH;
double      TEAM_ACTUATOR_NOISE;
std::string TEAM_L_START;
std::string TEAM_R_START;
bool        TEXT_LOG_COMPRESSION;
bool        TEXT_LOG_DATED;
std::string TEXT_LOG_DIR;
int         TEXT_LOG_FIXED;
std::string TEXT_LOG_FIXED_NAME;
bool        TEXT_LOGGING;
bool        USE_OFFSIDE;
bool        VERBOSE;
double      VISIBLE_ANGLE;
double      VISIBLE_DISTANCE;
double      WIND_ANG;
double      WIND_DIR;
double      WIND_FORCE;
double      WIND_NONE;
double      WIND_RAND;
double      WIND_RANDOM;

void handleServerParameters(std::string message);

} // namespace Server

} // namespace Olamani

#endif // SERVER_HPP
